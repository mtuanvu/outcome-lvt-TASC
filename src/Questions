1. Phân biệt overriding và overloading
- overriding (ghi đè phương thức):
    + khi một lớp con triển khai (implements) cụ thể một phương thức đã được định nghĩa trong lớp cha
    + mục đích: để có thể mở rộng hành vi trong lớp cha
    + điều kiện:
        - phương thức phải có cùng tên, cùng kiểu trả về và cùng tham số giống với phương thức trong
         lớp cha
        - phương thức trong lớp cha phải được khai báo và abstract
        - phương thức không thể ghi đè nếu bị đánh dấu là "final" hoặc "private"
    + ví dụ: xem trong question1.Overriding

- overloading (nạp chồng phương thức):
    + khi có nhiều phương thức cùng tên trong cùng một lớp nhưng khác nhau vể kiểu hoặc số lương tham số
    + mục đích: tăng tính linh hoạt của phương thức bằng cách cho phép xử lý nhiều loại tham số khác nhau
    + điều kiện: các phương thức phải có cùng tên nhưng khác nhau về
        - số lượng tham số
        - thứ tự tham số
        - kiểu dữ liệu của tham số
    không phụ thuộc vào kiểu trả về

   + ví dụ: xem trong question1.Overloading


so sánh :

Đặc điểm                            Overriding                                  Overloading
Mục đích        |      Thay đổi hành vi của phương thức cha       |    Tăng tính linh hoạt của phương thức
Quyết định      |      Runtime (Dynamic Binding)                  |    Compile-time (Static Binding)
Yêu cầu tham số |      Giống với method cha                       |    Khác số lượng, thứ tự hoặc kiểu trả về
Phạm vi         |      Giữa lớp cha lớp con                       |    Trong cùng một lớp
Annotation      |      @Override                                  |    Không cần



2. Constructor trong java là gì?, có thể @Override constructor không?
   *** - Constructor là một phương thức đặc biệt được sử dụng để khởi tạo đối tượng (object), tự động khi một đối tượng của
lớp cha được tạo
    - đặc điểm: tên giống tên lớp, không có kiểu trả về (kể cả void), không bắt buộc (nếu không khai báo thì java tự khai
báo constructor (default constructor))
    - ví dụ: xem ở question2.HamKhoiTao

   *** - không thể override constructor trong java:
            + constructor không được thừa kế: chỉ được gọi khi khởi tạo đối tượng và không được kế thừa từ lớp cha sang con
            + Override chỉ áp dụng cho các phương thức được kế thừa
       - mục đích của constructor:
            + dành riêng cho lớp mà nó được định nghĩa. Phục vụ để khởi tạo đối tượng của lớp đó chứ không liên quan đến
                lớp con
   *** - có thể sử dụng super() để gọi constructor của lớp cha: nó là cách kế thừa và mở rộng hành vi của lớp cha
   -ví dụ: xem trong question2.Animal